1) Write some input files - check
2) Write input file validation - check
3) Fix primitives (consistent naming, unittests, etc)
4) Write simple controller


input validation
    check for unrecognized keys (like 'model' instead of 'models')
    unit testing opportunities
        input code
        configuration building code
        factory code
    have run_tests.sh run validation on all input files

Do some vocab/docs
    session
    parameter set
    run
    job
    primitive
    binding
    observer -> observation
    analyst -> analysis
    discriminator -> objective
    simulation
    stage - just slang?
    ? slice
    ? projection


controller primitives
    mesh controller

    global fit controller
        do some kind of coarse mesh/random to start
        then start generating children interactively

        use & improve fitpy
            move to github

        multi-objective GA
            continuous time GA
            dominance sorting
            islands

        monitor convergence
        calculate parameter sensitivities
            use to drive future mutations?

Optimization
    c++ implementation of filament
    consider c++ implementation of main loop

Output
    Export data for plotting in external program
        include code version info

Database
    cascading deletes (important for maintaining clean db)
        special handling todo:
            if process is not attached to jobs, delete it
            delete slicing_* tables for deleted sessions.
        verify cascades work as expected
            can't this be done in unit tests?

Job Control
    add sentinel to end processes


misc features
    consider implementing 'derived parameters'
        e.g. simulation volume (could simplify input files)

    various sample rates per observation
        e.g. slower rate for capturing entire filament state
    resume stopped sessions
    add objectives/analyses to existing simulations


seemingly unimportant ideas
    allow experiment analyses/slicables to be used as inputs for other experiments
        allows multi-stage simulations
        allows key parameters to be calculated for a model (e.g. crit conc)

        'local blackboard' for experiment results
        sequence/list for experiments
