goals
    * critical concentration simulation
    * critical concentration vs rho_c

    - release rate/cooperativity data fit

    - D vs [G-ATP-actin] for various rho_r's
    - D vs [G-ATP-actin] for tip release

    + update measurements to use sample period
    - update update standard error calculation to not interpolate
        need to make sure everything gets converted to do proper
        interpolation ahead of time first

optimization
    segmented filament
        try filter for efficient state count generation
        what about indexing the segments?
            some_map[state] = set([segment(state=state, ...) ...])
        should i further map boundaries?
        even with these optimizations, do i gain anything?

    stop keeping every damn event
        you're on the right track now using the sample period for measurements
        need to extend it to concentrations

consider
    using symlinks for non-unique unlabeled/labeled config files files


visualizations for publication
    pollard (ignore release -- just use best fit result from p & w)
        fit ftc (brooks vs flat, assume brooks)
            best fit slice
            timecourses
        fit adppi
            best fit slices
            contours
            timecourses

    p & w (ignore cleavage --just use best fit result from pollard)
        only show cooperative model
            fit ftc (choose brooks as better fit)
                brooks vs flat
                    best fit slices
                timecourses
            fit pi
                best fit slices
                contours
                timecourses

    fujiwara (does this cooperative model fit data)
        simulated histograms vs data histograms (just show an example?)
        histogram width vs time (shows we fit all the fujiwara data)
        D vs concentration (vavylonis plot)
            this is the predictive/directly comparable to other theory plot


validation - high priority
    need input validation for yaml files
        * important, because input bugs are tricky
        check for missing parameters
        check for unrecognized keys (like 'model' instead of 'models')
    unit testing opportunities
        input code
        configuration building code
        factory code


configuration - medium-high priority
    allow more "global" like config, e.g. sesion binds or something.
        think about pieper & wegner..3 experiments with only 2 differences.
    validation for config files



performance profiling - medium priority
    record job start/stop times


process utils - low priority
    list active processes
    close processes
    list # active jobs, awaiting jobs, etc. (general job status)
    report run times for each job
    estimate remaining run time from session start time # jobs complete, etc


database - low priority
    set appropriate cascades for deletes
        it's going to be hard to keep the db clean without this


sim.sh - low priority
    integrate better log viewing options


Do some vocab/docs - low priority
    session
    run
    job
    primitive
    bind
    analysis
    objective
    simulation
    stage - just slang?
    ? slice
    ? projection


controller process - very low priority
    global fit mechanism
        do some kind of coarse mesh/random to start
        then start generating children
        *** NOTE This is unlikely to be useful for the first paper.
